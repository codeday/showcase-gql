datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

enum ProjectType {
  APP
  GAME
  VR
  HARDWARE
  WEBSITE
  LIBRARY
  BOT
  OTHER
}

enum MediaType {
  VIDEO
  AUDIO
  IMAGE
}

enum MediaTopic {
  TEAM
  DEMO
  PRESENTATION
  JUDGES
}

enum MetadataVisibility {
  PUBLIC
  PRIVATE
  ADMIN
}

enum ReactionType {
  CLAP
  HEART
  UPVOTE
  GRIN
}

model Tag {
  id       String    @id
  projects Project[]
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  slug String? @unique

  name                  String
  featured              Boolean     @default(false)
  type                  ProjectType @default(APP)
  description           String?
  priorExperience       String?
  challengesEncountered String?
  codeLink              String?
  viewLink              String?

  eventId        String
  programId      String          @default("codeday")
  eventGroupId   String?
  regionId       String?
  media          Media[]
  awards         Award[]
  members        Member[]
  metadata       Metadata[]
  metrics        Metric[]
  judgements     Judgement[]
  reactionCounts ReactionCount[]
  tags           Tag[]
}

model Media {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type  MediaType
  topic MediaTopic

  image    String
  stream   String?
  download String?

  featured Boolean  @default(false)

  project   Project @relation(fields: [projectId], references: [id])
  projectId String
}

model Award {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type     String
  modifier String?

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@unique([projectId, type, modifier])
}

model Member {

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  username String

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  metrics Metric[]
  @@id([projectId, username])
}

model Metadata {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  key        String
  visibility MetadataVisibility @default(PUBLIC)
  value      String?

  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  @@id([projectId, key])
}

model Metric {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String
  value Float

  member   Member @relation(fields: [projectId, username], references: [projectId, username])
  username String

  project   Project @relation(fields: [projectId], references: [id])
  projectId String
}

model JudgingPool {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  eventId      String?
  programId    String? @default("codeday")
  eventGroupId String?
  regionId     String?

  judgingCriteria JudgingCriteria[]
  Judgement       Judgement[]
}

model JudgingCriteria {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  judgingPool   JudgingPool @relation(fields: [judgingPoolId], references: [id])
  judgingPoolId String

  name      String
  weight    Float
  Judgement Judgement[]
}

model Judgement {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  judgingPool   JudgingPool @relation(fields: [judgingPoolId], references: [id])
  judgingPoolId String

  judgingCriteria   JudgingCriteria @relation(fields: [judgingCriteriaId], references: [id])
  judgingCriteriaId String

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  username String
  value    Float

  @@unique([projectId, judgingCriteriaId, username])
}

model ReactionCount {
  type  ReactionType
  count Int          @default(0)

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@id([type, projectId])
}

model Photo {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url       String
  urlLarge  String?
  urlMedium String?
  urlSmall  String?

  thanks String?

  featured Boolean @default(false)

  programId    String  @default("codeday")
  eventId      String
  regionId     String?
  eventGroupId String?
}
